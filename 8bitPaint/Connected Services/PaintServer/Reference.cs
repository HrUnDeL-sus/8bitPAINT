//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace _8bitPaint.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IPaintService")]
    public interface IPaintService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaintService/ReturnPath", ReplyAction="http://tempuri.org/IPaintService/ReturnPathResponse")]
        string ReturnPath();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaintService/ReturnPath", ReplyAction="http://tempuri.org/IPaintService/ReturnPathResponse")]
        System.Threading.Tasks.Task<string> ReturnPathAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaintService/HasUpdate", ReplyAction="http://tempuri.org/IPaintService/HasUpdateResponse")]
        bool HasUpdate(int version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaintService/HasUpdate", ReplyAction="http://tempuri.org/IPaintService/HasUpdateResponse")]
        System.Threading.Tasks.Task<bool> HasUpdateAsync(int version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaintService/GetAllCountPicture", ReplyAction="http://tempuri.org/IPaintService/GetAllCountPictureResponse")]
        int GetAllCountPicture(string category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaintService/GetAllCountPicture", ReplyAction="http://tempuri.org/IPaintService/GetAllCountPictureResponse")]
        System.Threading.Tasks.Task<int> GetAllCountPictureAsync(string category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaintService/Download8BP", ReplyAction="http://tempuri.org/IPaintService/Download8BPResponse")]
        byte[] Download8BP();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaintService/Download8BP", ReplyAction="http://tempuri.org/IPaintService/Download8BPResponse")]
        System.Threading.Tasks.Task<byte[]> Download8BPAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaintService/GetPicture", ReplyAction="http://tempuri.org/IPaintService/GetPictureResponse")]
        byte[][] GetPicture(string category, int id, int path, bool isBin, string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaintService/GetPicture", ReplyAction="http://tempuri.org/IPaintService/GetPictureResponse")]
        System.Threading.Tasks.Task<byte[][]> GetPictureAsync(string category, int id, int path, bool isBin, string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaintService/GetAllCategories", ReplyAction="http://tempuri.org/IPaintService/GetAllCategoriesResponse")]
        string[] GetAllCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaintService/GetAllCategories", ReplyAction="http://tempuri.org/IPaintService/GetAllCategoriesResponse")]
        System.Threading.Tasks.Task<string[]> GetAllCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaintService/WritePicture", ReplyAction="http://tempuri.org/IPaintService/WritePictureResponse")]
        void WritePicture(byte[] content, string name, string category, bool isBin, int quality);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaintService/WritePicture", ReplyAction="http://tempuri.org/IPaintService/WritePictureResponse")]
        System.Threading.Tasks.Task WritePictureAsync(byte[] content, string name, string category, bool isBin, int quality);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaintService/HasFile", ReplyAction="http://tempuri.org/IPaintService/HasFileResponse")]
        bool HasFile(string category, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaintService/HasFile", ReplyAction="http://tempuri.org/IPaintService/HasFileResponse")]
        System.Threading.Tasks.Task<bool> HasFileAsync(string category, string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPaintServiceChannel : _8bitPaint.ServiceReference1.IPaintService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PaintServiceClient : System.ServiceModel.ClientBase<_8bitPaint.ServiceReference1.IPaintService>, _8bitPaint.ServiceReference1.IPaintService {
        
        public PaintServiceClient() {
        }
        
        public PaintServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PaintServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PaintServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PaintServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string ReturnPath() {
            return base.Channel.ReturnPath();
        }
        
        public System.Threading.Tasks.Task<string> ReturnPathAsync() {
            return base.Channel.ReturnPathAsync();
        }
        
        public bool HasUpdate(int version) {
            return base.Channel.HasUpdate(version);
        }
        
        public System.Threading.Tasks.Task<bool> HasUpdateAsync(int version) {
            return base.Channel.HasUpdateAsync(version);
        }
        
        public int GetAllCountPicture(string category) {
            return base.Channel.GetAllCountPicture(category);
        }
        
        public System.Threading.Tasks.Task<int> GetAllCountPictureAsync(string category) {
            return base.Channel.GetAllCountPictureAsync(category);
        }
        
        public byte[] Download8BP() {
            return base.Channel.Download8BP();
        }
        
        public System.Threading.Tasks.Task<byte[]> Download8BPAsync() {
            return base.Channel.Download8BPAsync();
        }
        
        public byte[][] GetPicture(string category, int id, int path, bool isBin, string filename) {
            return base.Channel.GetPicture(category, id, path, isBin, filename);
        }
        
        public System.Threading.Tasks.Task<byte[][]> GetPictureAsync(string category, int id, int path, bool isBin, string filename) {
            return base.Channel.GetPictureAsync(category, id, path, isBin, filename);
        }
        
        public string[] GetAllCategories() {
            return base.Channel.GetAllCategories();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllCategoriesAsync() {
            return base.Channel.GetAllCategoriesAsync();
        }
        
        public void WritePicture(byte[] content, string name, string category, bool isBin, int quality) {
            base.Channel.WritePicture(content, name, category, isBin, quality);
        }
        
        public System.Threading.Tasks.Task WritePictureAsync(byte[] content, string name, string category, bool isBin, int quality) {
            return base.Channel.WritePictureAsync(content, name, category, isBin, quality);
        }
        
        public bool HasFile(string category, string name) {
            return base.Channel.HasFile(category, name);
        }
        
        public System.Threading.Tasks.Task<bool> HasFileAsync(string category, string name) {
            return base.Channel.HasFileAsync(category, name);
        }
    }
}
